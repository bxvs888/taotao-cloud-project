apply plugin: 'application'

dependencies {
    api project(":taotao-cloud-tx:taotao-cloud-tx-tm")
    api project(":taotao-cloud-tx:taotao-cloud-tx-rm")
}

jar {
    from(project(':taotao-cloud-tx:taotao-cloud-tx-common').jar) { into("lib/") }
    from(project(':taotao-cloud-tx:taotao-cloud-tx-raft').jar) { into("lib/") }
    from(project(':taotao-cloud-tx:taotao-cloud-tx-rm').jar) { into("lib/") }
    from(project(':taotao-cloud-tx:taotao-cloud-tx-tm').jar) { into("lib/") }

    //详细信息参考 https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
    //基本的文件名
    //archivesBaseName = 'Example'
    //文件夹大于65535个，需要开启zip64
    zip64=true

    manifest {
        attributes 'Main-Class': "com.taotao.cloud.tx.server.NettyServer"
        attributes 'Class-Path': configurations.compileClasspath.files.collect { "lib/$it.name" }.join(' ')
    }

    //gradle 处理重复文件，include 最后一个重复文件“胜出”的默认策略。
    //duplicatesStrategy = 'include' // <<---- addition
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    into('lib') { // 将第三方jar放入 lib目录中
        from configurations.runtimeClasspath.findAll { it.name.endsWith('.jar') }
    }

    //打包依赖包
    //from {
    //    (configurations.runtimeClasspath).collect {
    //        it.isDirectory() ? it : zipTree(it)
    //    }
    //}

    //delete "${project.layout.buildDirectory.asFile.get()}\\libs\\lib"
    //from configurations.runtimeClasspath
    //into "${project.layout.buildDirectory.asFile.get()}\\libs\\lib"
    //from configurations.compileClasspath
    //into "${project.layout.buildDirectory.asFile.get()}\\libs\\lib"

    //into('lib') { // 将第三方jar放入 lib目录中
    //    from configurations.compile
    //}
}

//task combineJars(type: Jar) {
//    from(zipTree(tasks.findByName(':taotao-cloud-tx:taotao-cloud-tx-common:jar')))
//    from(zipTree(tasks.findByName(':taotao-cloud-tx:taotao-cloud-tx-rm:jar')))
//    from(zipTree(tasks.findByName(':taotao-cloud-tx:taotao-cloud-tx-tm:jar')))
//    //from(project(':taotao-cloud-tx:taotao-cloud-tx-common').jar) { into("libs/") }
//    //from(project(':tools').configurations.runtimeClasspath) { into("libs/") }
//    // 添加更多的模块，如果需要
//    // from(zipTree(tasks.findByName('module3Jar')))
//
//    // 设置合并后的jar的执行类
//    manifest {
//        attributes(
//                'Main-Class': 'com.taotao.cloud.tx.server.TxManagerApplication'
//        )
//    }
//}
//
//// 确保在构建项目时执行这个任务
//combineJars.dependsOn(
//        subprojects.collect { it.tasks.findByName('jar') }
//)


// 方案1：打包成jar，包含依赖，即运行：./gradlew fatJar
//create a single Jar with all dependencies
/*
//./gradlew fatJar
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Fat Jar',
        'Implementation-Version': version,
        'Main-Class': 'Python_Patch_Parser.Main'
    }
    baseName = project.name + '-jar-with-dependencies'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
*/

// 方案2：打包成Jar，包含依赖，即运行：./gradlew jar -PallInOne
//jar {
//    manifestContentCharset 'utf-8'
//    metadataCharset 'utf-8'
//    manifest {
//        attributes "Main-Class": mainClassName
//    }
//    if (project.hasProperty("allInOne")) { // ./gradlew jar -PallInOne
//        baseName = project.name + '-jar-with-dependencies'
//        from {
//            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//        }
//    }
//}

//configurations {
//    externalLib.extendsFrom(implementation)
//}
//
//task copyLibs(type: Copy){
//    from configurations.externalLib{
//        into '<dest-dir-name>'
//
//        exclude('<if any jars need to be excluded>')
//    }
//}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.taotao.cloud.tx.server.TxManagerApplication'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.filter {
            it.name.endsWith('.jar')
        }
    }
    with jar
}

task releaseTarZip(type: Zip, dependsOn: jar) {

    archiveFileName = "${project.name}.zip"

    from("${project.parent.projectDir}/taotao-cloud-tx-distribution/bin") {
        include '**'

        into "bin"
    }

    from("${project.parent.projectDir}/taotao-cloud-tx-distribution/conf") {
        include '**'

        into "conf"
    }

    from "${project.parent.projectDir}/taotao-cloud-tx-distribution/LICENSE-BIN" rename {String filename -> filename.replace("-BIN", "")}
    from "${project.parent.projectDir}/taotao-cloud-tx-distribution/NOTICE-BIN" rename {String filename -> filename.replace("-BIN", "")}

    from('build/libs') {
        include '*.jar'

        into "target"
    }

}

//tasks.create(name: "releaseTarGz", dependsOn: configurations.archives.artifacts, type: Tar) {
tasks.create(name: "releaseTarGz", dependsOn: jar, type: Tar) {

    into "taotao-cloud-tx-server"
    compression = Compression.GZIP
    //extension = 'tar.gz'
    archiveExtension = 'tar.gz'

    from("${project.parent.projectDir}/taotao-cloud-tx-distribution/bin") {
        include '**'

        into "bin"
    }

    from("${project.parent.projectDir}/taotao-cloud-tx-distribution/conf") {
        include '**'

        into "conf"
    }

    from "${project.parent.projectDir}/taotao-cloud-tx-distribution/LICENSE-BIN" rename {String filename -> filename.replace("-BIN", "")}
    from "${project.parent.projectDir}/taotao-cloud-tx-distribution/NOTICE-BIN" rename {String filename -> filename.replace("-BIN", "")}

    from('build/libs') {
        include '*.jar'

        into "target"
    }

//    from(project.file("$rootDir/bin")) { into "bin/" }
//    from(project.file("$rootDir/config")) { into "config/" }
//    from(project.file("$rootDir/licenses")) { into "licenses/" }
//    from "$rootDir/LICENSE-binary" rename {String filename -> filename.replace("-binary", "")}
//    from "$rootDir/NOTICE-binary" rename {String filename -> filename.replace("-binary", "")}
//    from(configurations.runtimeClasspath) { into("libs/") }
//    from(configurations.archives.artifacts.files) { into("libs/") }
//    from(project.siteDocsTar) { into("site-docs/") }
//    from(project(':tools').jar) { into("libs/") }
//    from(project(':tools').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':trogdor').jar) { into("libs/") }
//    from(project(':trogdor').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':shell').jar) { into("libs/") }
//    from(project(':shell').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':connect:api').jar) { into("libs/") }
//    from(project(':connect:api').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':connect:runtime').jar) { into("libs/") }
//    from(project(':connect:runtime').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':connect:transforms').jar) { into("libs/") }
//    from(project(':connect:transforms').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':connect:json').jar) { into("libs/") }
//    from(project(':connect:json').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':connect:file').jar) { into("libs/") }
//    from(project(':connect:file').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':connect:basic-auth-extension').jar) { into("libs/") }
//    from(project(':connect:basic-auth-extension').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':connect:mirror').jar) { into("libs/") }
//    from(project(':connect:mirror').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':connect:mirror-client').jar) { into("libs/") }
//    from(project(':connect:mirror-client').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':streams').jar) { into("libs/") }
//    from(project(':streams').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':streams:streams-scala').jar) { into("libs/") }
//    from(project(':streams:streams-scala').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':streams:test-utils').jar) { into("libs/") }
//    from(project(':streams:test-utils').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':streams:examples').jar) { into("libs/") }
//    from(project(':streams:examples').configurations.runtimeClasspath) { into("libs/") }
//    from(project(':tools:tools-api').jar) { into("libs/") }
//    from(project(':tools:tools-api').configurations.runtimeClasspath) { into("libs/") }
    duplicatesStrategy 'exclude'

}
