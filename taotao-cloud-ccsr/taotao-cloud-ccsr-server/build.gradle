apply from: rootProject.file('gradle/springboot.gradle')

dependencies {
    api "io.github.shuigedeng:taotao-boot-starter-core"
    api project(":taotao-cloud-ccsr:taotao-cloud-ccsr-server-starter")

    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
}

configurations {
    configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
        resolutionStrategy.cacheDynamicVersionsFor 0, "seconds"

        resolutionStrategy {
            force "com.caucho:hessian:4.0.63"
            force "com.alipay.sofa:hessian:3.3.6"
            force "com.google.protobuf:protobuf-java:3.25.5"
            force "com.google.protobuf:protobuf-java-util:3.25.5"
        }

        exclude group: "commons-logging", module: "commons-logging"
    }
}

jar {
    from(project(":taotao-cloud-ccsr:taotao-cloud-ccsr-server-starter").jar) { into("lib/") }
    from(project(":taotao-cloud-ccsr:taotao-cloud-ccsr-core").jar) { into("lib/") }
    from(project(":taotao-cloud-ccsr:taotao-cloud-ccsr-api").jar) { into("lib/") }
    from(project(":taotao-cloud-ccsr:taotao-cloud-ccsr-spi").jar) { into("lib/") }
    from(project(":taotao-cloud-ccsr:taotao-cloud-ccsr-common").jar) { into("lib/") }

    //详细信息参考 https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
    //基本的文件名
    //archivesBaseName = 'Example'
    //文件夹大于65535个，需要开启zip64
    zip64=true

    manifest {
        attributes 'Main-Class': "com.taotao.cloud.ccsr.server.CcsrServerApplication"
        attributes 'Class-Path': configurations.compileClasspath.files.collect { "lib/$it.name" }.join(' ')
    }

    //gradle 处理重复文件，include 最后一个重复文件“胜出”的默认策略。
    //duplicatesStrategy = 'include' // <<---- addition
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    into('lib') { // 将第三方jar放入 lib目录中
        from configurations.runtimeClasspath.findAll { it.name.endsWith('.jar') }
    }

    //打包依赖包
    //from {
    //    (configurations.runtimeClasspath).collect {
    //        it.isDirectory() ? it : zipTree(it)
    //    }
    //}

    //delete "${project.layout.buildDirectory.asFile.get()}\\libs\\lib"
    //from configurations.runtimeClasspath
    //into "${project.layout.buildDirectory.asFile.get()}\\libs\\lib"
    //from configurations.compileClasspath
    //into "${project.layout.buildDirectory.asFile.get()}\\libs\\lib"

    //into('lib') { // 将第三方jar放入 lib目录中
    //    from configurations.compile
    //}
}



