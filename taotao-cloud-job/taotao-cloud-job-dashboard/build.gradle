dependencies {
    api project(":taotao-cloud-job:taotao-cloud-job-common")
    api project(":taotao-cloud-job:taotao-cloud-job-worker")
    api project(":taotao-cloud-job:taotao-cloud-job-retry")
    api project(":taotao-cloud-job:taotao-cloud-job-dag")
    api project(":taotao-cloud-job:taotao-cloud-job-api")
    api project(":taotao-cloud-job:taotao-cloud-job-server")
    api project(":taotao-cloud-job:taotao-cloud-job-nameserver")
    api project(":taotao-cloud-job:taotao-cloud-job-client")
    api project(":taotao-cloud-job:taotao-cloud-job-consistency")
    api project(":taotao-cloud-job:taotao-cloud-job-datasource")
    api project(":taotao-cloud-job:taotao-cloud-job-retry")
}

jar {
    from(project(":taotao-cloud-job:taotao-cloud-job-api").jar) { into("lib/") }
    from(project(":taotao-cloud-job:taotao-cloud-job-common").jar) { into("lib/") }
    from(project(":taotao-cloud-job:taotao-cloud-job-client").jar) { into("lib/") }
    from(project(":taotao-cloud-job:taotao-cloud-job-dag").jar) { into("lib/") }
    from(project(":taotao-cloud-job:taotao-cloud-job-datasource").jar) { into("lib/") }
    from(project(":taotao-cloud-job:taotao-cloud-job-consistency").jar) { into("lib/") }
    from(project(":taotao-cloud-job:taotao-cloud-job-retry").jar) { into("lib/") }
    from(project(":taotao-cloud-job:taotao-cloud-job-nameserver").jar) { into("lib/") }
    from(project(":taotao-cloud-job:taotao-cloud-job-server").jar) { into("lib/") }
    from(project(":taotao-cloud-job:taotao-cloud-job-worker").jar) { into("lib/") }

    //详细信息参考 https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
    //基本的文件名
    //archivesBaseName = 'Example'
    //文件夹大于65535个，需要开启zip64
    zip64=true

    manifest {
        attributes 'Main-Class': "com.taotao.cloud.tx.server.NettyServer"
        attributes 'Class-Path': configurations.compileClasspath.files.collect { "lib/$it.name" }.join(' ')
    }

    //gradle 处理重复文件，include 最后一个重复文件“胜出”的默认策略。
    //duplicatesStrategy = 'include' // <<---- addition
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    into('lib') { // 将第三方jar放入 lib目录中
        from configurations.runtimeClasspath.findAll { it.name.endsWith('.jar') }
    }

    //打包依赖包
    //from {
    //    (configurations.runtimeClasspath).collect {
    //        it.isDirectory() ? it : zipTree(it)
    //    }
    //}

    //delete "${project.layout.buildDirectory.asFile.get()}\\libs\\lib"
    //from configurations.runtimeClasspath
    //into "${project.layout.buildDirectory.asFile.get()}\\libs\\lib"
    //from configurations.compileClasspath
    //into "${project.layout.buildDirectory.asFile.get()}\\libs\\lib"

    //into('lib') { // 将第三方jar放入 lib目录中
    //    from configurations.compile
    //}
}
